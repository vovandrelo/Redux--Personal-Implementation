import { useContext, useEffect, useRef, useState } from "react";
import { StoreContext } from "../context/StoreContext";
import { nanoid } from "nanoid";

// Хук useSelector будет подписывать компонент на изменение глобального состояния:
export function useSelector(selector) {
  // В качестве аргумента поступает функция, которая из глобального состояния
  // извлекает только ту часть, которая интересная создаваемому компоненту.

  // Создаём id компонента-подписчика. Так как при перерендере компонента Ref-объект
  // остаётся неизменным, то и id компонента не будет изменяться при каждом перерендере.
  const componentId = useRef(nanoid());

  // Получаем доступ к глобальному состоянию через использование контекста:
  const store = useContext(StoreContext);

  // Извлекаем из ГС ту часть, от которой должен зависеть текущий компонент. Далее
  // извлечённая часть используется в качестве локального состояния данного компонента:
  const [value, setValue] = useState(selector(store.state));

  // После создания(рендера) компонента он подписывается на изменение ГС:
  useEffect(() => {
    // Детально подпись на ГС происходит следующим образом:
    // 1. Метод subscribe создаёт подписчика путём добавления в объект подписчиков нового
    //    ключа и значения. Ключём выступает id компонента, а значением - callback.
    // 2. Метод subscribe вызывает переданный callback и передаёт в качестве аргумента ГС.
    store.subscribe(componentId.current, state => {
      // 3. Из ГС извлекается та часть, от которой должен зависеть текущий компонент.
      //    (Если опустить функцию, которая определяет ту часть состояния, от которой
      //     зависит текущий компонент, то при любом изменеии ГС изменяться будут
      //     абсолютно все компоненты).
      // 4. Извлечённая часть устанавливается в качестве состояния текущего компонента.
      setValue(selector(state));
    });
    // Теперь после каждого изменения ГС будут вызваны функции-оповестители всех
    // компонентов-подписчиков. Далее с помощью selector-а из ГС извлечётся та часть,
    // которая необходима данному компоненту. В случае изменения этой части, компонент
    // изменит состояние и будет перерендерен. Если эта часть не изменилась, то функция
    // setValue это определит и не изменит состояние компонента => перерендера не будет.

    // Перед размонтированием компонента он отписывается от ГС:
    return () => store.unsubscribe(componentId);
  }, []);

  // Возвращаем в компонент то значение ГС, которое ему необходимо:
  return value;
}